package utils;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.Properties;

import io.restassured.builder.RequestSpecBuilder;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.filter.log.RequestLoggingFilter;
import io.restassured.filter.log.ResponseLoggingFilter;
import io.restassured.http.ContentType;
import io.restassured.specification.RequestSpecification;
import io.restassured.specification.ResponseSpecification;

public class Utils {
	
	public static RequestSpecification reqspec;
	public static ResponseSpecification resspec;
	public static String env = getGlobalValue("env");
	
	public String getCurrrentTimeStamp()
	{

	    SimpleDateFormat sdf = new SimpleDateFormat("YYYY-MM-DD");
	    
	    Timestamp timestamp = new Timestamp(System.currentTimeMillis());
		
		return sdf.format(timestamp);	
	}

	public static String getGlobalValue(String key)
	{	
		Properties prop = null;
		
		try
		{
		prop = new Properties();
		FileInputStream fis = new FileInputStream(System.getProperty("user.dir")+"\\src\\main\\java\\resources\\GlobalProperties.properties");
		prop.load(fis);	
		}
		catch (IOException e){	
		e.printStackTrace();
		System.out.println("Unable to read property file");
		}
		return prop.getProperty(key);
	}
	
	public RequestSpecification requestSpecification(String parameterName,String parameterValues)throws IOException
	{				
		String logsDir = "Application-Logs";
		new File(System.getProperty("user.dir")+"/target/"+logsDir).mkdir();
		String loggerFile = "Logs_"+getCurrrentTimeStamp()+".txt";
		
		PrintStream psLog =new PrintStream(new FileOutputStream("target/Application-Logs/"+loggerFile));
		
			reqspec = new RequestSpecBuilder().
					setBaseUri(getGlobalValue("baseuri")).
					addParam(parameterName, parameterValues).
					addFilter(RequestLoggingFilter.logRequestTo(psLog)).
					addFilter(ResponseLoggingFilter.logResponseTo(psLog)).
					build();
			
		return reqspec;	
	}
	
	public RequestSpecification requestSpecification(String parName1,String parValue1, String parName2,String parValue2)throws IOException
	{				
		String logsDir = "Application-Logs";
		new File(System.getProperty("user.dir")+"/target/"+logsDir).mkdir();
		String loggerFile = "Logs_"+getCurrrentTimeStamp()+".txt";
		
		PrintStream psLog =new PrintStream(new FileOutputStream("target/Application-Logs/"+loggerFile));
		
			reqspec = new RequestSpecBuilder().
					setBaseUri(getGlobalValue("baseuri")).
					addParam(parName1, parValue1).
					addParam(parName2, parValue2).
					addFilter(RequestLoggingFilter.logRequestTo(psLog)).
					addFilter(ResponseLoggingFilter.logResponseTo(psLog)).
					build();
			
		return reqspec;	
	}
	
	public ResponseSpecification responseSpecification(int code)
	{
		 
		resspec = new ResponseSpecBuilder().
				expectStatusCode(code).
				expectContentType(ContentType.JSON).build();
		
		 return resspec;	
	}

	

}
